(defparameter *nodes* '((living-room (you are in the living-room.
                                        a wizard is snoring loudly on the couch.))
                        (garden (you are in a beautiful garden.
                                 there is a well in front of you.))
                        (attic (you are in the attic.
                                there is a giant wdlding torch in the corner.))))
(assoc 'living-room *nodes*)
(defun describe-location (location nodes)
  (cadr (assoc location nodes)))
(describe-location 'attic *nodes*)
(defparameter *edges* '((living-room (garden west door)
                                    (attic upstairs ladder))
                       (garden (living-room east door))
                       (attic (living-room downstairs ladder))))
(defun describe-path (edge)
  `(there is a ,(caddr edge) going ,(cadr edge) from here.))
(describe-path '(garden west door))
(mapcar #'car '((x y) (a b)))
(append '(x) '(y) '(z))
(apply #'append '((x) (y) (z)) )
(defun describe-paths (location edges)
  (apply #'append (mapcar #'describe-path (cdr (assoc location edges)))))
(describe-paths 'living-room *edges*)
(defparameter *objects* '(whiskey bucket frog chain))
(defparameter *object-locations* '((whiskey living-room)
                                   (bucket living-room)
                                   (chain garden)
                                   (frog garden)))

(defun object-at (loc objs obj-locs)
  (labels ((at-loc-p (obj)
             (eq (cadr (assoc obj obj-locs) ) loc)))
    (remove-if-not #'at-loc-p objs)))
(object-at 'living-room *objects* *object-locations*)

(defun describe-objects (loc objs obj-locs)
  (labels ((describe-object (obj)
             `(you see a ,obj on the floor.)))
    (apply #'append (mapcar #'describe-object (object-at loc objs obj-locs)))))
(describe-objects 'living-room *objects* *object-locations*)
