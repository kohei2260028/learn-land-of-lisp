(print "foo")
(progn (print "this")
       (print "is")
       (print "a")
       (print "pen"))

(progn (prin1 "this")
       (prin1 "is")
       (print "a")
       (prin1 "pen"))
(defun say-hello ()
  (print "please type your name:")
  (let ((name (read)))
    (print "nice to meet you")
    (print name)))
(say-hello)
(defun say-hello ()
  (princ "please type your name:")
  (let ((name (read-line)))
    (princ "nice to meet you, ")
    (princ name)))
(defparameter *foo* '(+ 5 3))
(eval *foo*)
(read-from-string
 (concatenate 'string "(" "+ 4 5" ")"))
(defun game-read ()
  (let ((cmd (read-from-string
              (concatenate 'string "(" (read-line) ")"))))
    (flet ((quote-it (x)
             (list 'quote x)))
      (cons (car cmd) (mapcar #'quote-it (cdr cmd))))))
(defparameter *allowd-commands* '(look walk pickup inventory +))
(defun game-eval (sexp)
  (if (member (car sexp) *allowd-commands*)
      (eval sexp)
      '(i do not know that command.)))
(game-eval '(* 4 5))
(coerce(string-trim "() " (prin1-to-string '(this or , "that"))) 'list)
(defun tweak-text (lst caps lit)
  (when lst
    (let ((item (car lst))
          (rest (cdr lst)))
      (cond ((eql item #\space) (cons item (tweak-text rest caps lit)))
            ((member item '(#\! #\? #\.)) (cons item (tweak-text rest t lit)))
            ((eql item #\") (tweak-text rest caps (not lit)))
            (lit (cons item (tweak-text rest nil lit)))
            (caps (cons (char-upcase item) (tweak-text rest nil lit)))
            (t (cons (char-downcase item) (tweak-text rest nil lit)))))))
(coerce(tweak-text (coerce(string-trim "() " (prin1-to-string '(this or that))) 'list)
             t nil) 'string)
(defun game-print (lst)
  (princ (coerce(tweak-text (coerce ( string-trim "() "
                                                  (prin1-to-string lst))
                                    'list)
                            t
                            nil)
                'string))
  (fresh-line))
(game-print '(this is test. is it test?))
(defun game-repl ()
  (let ((cmd (game-read)))
    (unless (eq (car cmd) 'quit)
      (game-print (game-eval cmd))
      (game-repl))))
